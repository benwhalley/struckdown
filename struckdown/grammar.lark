?start: (single_completion | list_completion | placeholder | templatetag | begin_delimiter | obliviate | markdown)* completion

// markdown: /[^{{\[\¡]+/ -> markdown_text
// using negative lookahead to avoid matching single { or [
markdown: /(?:(?!{{|\[\[|¡).)+/s  -> markdown_text

placeholder: "{{" WS? var_path WS? "}}"
var_path: CNAME ("." CNAME)*

begin_delimiter: "¡BEGIN" -> begin_delimiter

obliviate: "¡OBLIVIATE" -> obliviate

?templatetag: /{%\s.*?%}/s        -> templatetag

?completion: list_completion | single_completion

// Single: [[type:var|opt1,opt2]]
single_completion: "[[" WS? completion_body WS? "]]"

completion_body: CNAME quantifier? ":" CNAME ("|" option_list)? -> typed_completion
    | CNAME ("|" option_list)? -> untyped_completion

quantifier: "*"                           -> zero_or_more
          | "+"                           -> one_or_more
          | "?"                           -> zero_or_one
          | "{" NUMBER "}"                -> exact
          | "{" NUMBER "," "}"            -> at_least
          | "{" NUMBER "," NUMBER "}"     -> between

option_list: option ("," option)*
// allow quoted strings in options
option: STRING | /[^,\]\|]+/
// option: CNAME

// List: *[[...]], 5*[[...]], 2:5*[[...]]
list_completion: "*" single_completion -> wildcard_list
               | NUMBER single_completion -> fixed_list
               | NUMBER ":" NUMBER single_completion -> ranged_list

list_prefix: "*"              -> wildcard
           | NUMBER           -> fixed
           | NUMBER ":" NUMBER -> ranged

%import common.CNAME
%import common.INT -> NUMBER
%import common.ESCAPED_STRING -> STRING
%import common.WS
%ignore WS
